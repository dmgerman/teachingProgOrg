#+TITLE configuration for teaching emacs

The table of contents is automatically generated by having the tag :TOC: (see toc-org below)

* Table of Contents :TOC:
- [[#customize-presentation][Customize presentation]]
  - [[#i-personally-like-the-leuven-theme][I personally like the leuven theme]]
  - [[#highlight-the-current-line][highlight the current line]]
  - [[#fontsize][fontsize]]
  - [[#remove-some-unnecessary-info][Remove some unnecessary info]]
  - [[#keep-header-of-a-table][Keep header of a table]]
  - [[#keep-the-header-of-the-section-on-all-the-time][Keep the header of the section on all the time]]
  - [[#eliminate-some-org-typesetting-tags][Eliminate some org typesetting tags]]
  - [[#nice-bullets][nice bullets]]
  - [[#color-of-different-parts-of-code-blocks][Color of different parts of code blocks]]
  - [[#configure-the-size-of--the-typeface-used-in-headers][Configure the size of  the typeface used in headers]]
  - [[#code-blocks-always-generate-an-output-block][Code blocks always generate an output block]]
  - [[#add-some-spacing][add some spacing]]
- [[#making-sure-that-it-exports-properly][Making sure that it exports properly]]
  - [[#enable-the-automatic-creation-of-a-table-of-contents][Enable the automatic creation of a table of contents]]
- [[#programming-related][Programming related]]
  - [[#languages-to-use][Languages to use]]
  - [[#customize-this-to-the-languages-you-want-to-use][Customize this to the languages you want to use]]
  - [[#configure-specific-tools][Configure specific tools]]
- [[#make-your-life-easier][Make your life easier]]
  - [[#yasnippets][yasnippets]]
  - [[#less-typing][less typing]]
- [[#other][Other]]
  - [[#do-not-add-extra-indentation-to-a-block][Do not add extra indentation to a block]]
  - [[#other-ends][other ends]]
- [[#function-to-start-presenting][function to start presenting]]
- [[#using-xournal-to-annotate-blocks][Using xournal to annotate blocks]]

* Customize presentation

** I personally like the leuven theme

- it emphasizes *code blocks*
- reduces attention to the *#begin_src* and *#end_src* lines
  

#+begin_src emacs-lisp
(use-package leuven-theme
  :ensure t
  :config
  (load-theme 'leuven t))
#+end_src

** highlight the current line

I like to call attention to the line where the mouse is.

#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

it can also be per buffer-mode using via a hook (see hl-line-mode)

** fontsize

I have a function called dmg-font-size to easily modify the default
font size in emacs. This changes the font size of the buffer and the
mode line. It also uses the font that I prefer. 

#+begin_src emacs-lisp
; bind increasing/decreasing font size
(global-set-key (kdb "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

;; make sure that we have at least one fontface
(defvar dmg-typeface (car (font-family-list))
  "What is the default typeface to use")

;; what fontface to use; but only if exists
(when (member "Source Code Pro" (font-family-list))
   (setq dmg-typeface "Inconsolata Medium"))

(defun dmg-font-size (size)
  (interactive "NPoint size:")
  (set-frame-font (concat dmg-typeface "-" (number-to-string size)) t t))
#+end_src

Evaluate this to see what fonts you have available

#+begin_src emacs-lisp
(font-family-list)
#+end_src

** Remove some unnecessary info

Remove  the tool bars

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

make sure inline images are always shown

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src


** Keep header of a table

This is very useful for SQL, since it keeps the header of the table at the top

#+begin_src emacs-lisp
(use-package "org-table-sticky-header"
  :ensure t
  :init 
  (add-hook 'org-mode-hook 'org-table-sticky-header-mode)
  )
#+end_src


** Keep the header of the section on all the time

#+begin_src emacs-lisp
(use-package "org-sticky-header"
  :ensure t
  :init
   (progn
;     (setq org-sticky-header-full-path 'full)
     (setq org-sticky-header-full-path nil)
     (setq org-sticky-header-heading-star " ")
     (setq org-sticky-header-always-show-header nil)
;     (setq org-sticky-header-always-show-header t)
     (add-hook 'org-mode-hook 'org-sticky-header-mode)
    )
  )
#+end_src

#+RESULTS:


** Eliminate some org typesetting tags

This makes:

- *bold* appears as bold
- _underscored_ appears as underscored (not supported by github)
- /italics/ appear as italics (as long as the font supports)
- ~code~ appear as code
- =verbatim= appear as verbatim

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

** nice bullets

#+begin_src emacs-lisp
(use-package "org-bullets"
   :ensure t
   :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Color of different parts of code blocks

- Most is done by the Leuven theme
- But I further change some colors to *add or remove emphasis* to
  certain sections of the document
  - *bold*
  - /italics/
  - _underscored_
  - =verbatim=

#+begin_src emacs-lisp
(if window-system 
    (custom-theme-set-faces
     'user
     '(bold                ((t (:foreground "red" :weight bold))))
     '(italic              ((t (:foreground "purple" :weight bold))))
     '(underline           ((t (:foreground "darkgreen" :weight bold))))
     '(org-verbatim        ((t (:foreground "darkgrey" :weight bold))))
; change the size of the begin_src and end_src lines
;     '(org-block-begin-line ((t (:height 0.7))))
;     '(org-block-end-line ((t (:height 0.7))))
     )
  )
#+end_src

#+RESULTS:


** Configure the size of  the typeface used in headers

#+begin_src emacs-lisp
  (if window-system
    (let* ((headline `(:inherit default :weight bold)))
      (custom-theme-set-faces
       'user
       `(org-level-4 ((t (,@headline :height 1.1))))
       `(org-level-3 ((t (,@headline :height 1.15))))
       `(org-level-2 ((t (,@headline :height 1.3))))
       `(org-level-1 ((t (,@headline :background "#E5F4FB" :height 1.5))))
       `(org-document-title ((t (:height 1.0 :underline nil))))))
  )
#+end_src

#+RESULTS:

** Code blocks always generate an output block

- By default, very short outputs are presented as "results".
- I don't like that
- I prefer to see the output as a block. 

#+begin_src  emacs-lisp
(setq org-babel-min-lines-for-block-output 0)
#+end_src

** add some spacing

Left and right margings, and spacing between lines

#+begin_src emacs-lisp
(setq left-margin-width 10)
(setq right-margin-width 10)  
(setq line-spacing 0.25) 
#+end_src

#+RESULTS:
#+begin_example
0.25
#+end_example


* Making sure that it exports properly

** Enable the automatic creation of a table of contents

It requires to have a TOC tag in the header of the file. See top of this file.

#+begin_src emacs-lisp
(use-package "toc-org"
  :ensure t
  :init
    (add-hook 'org-mode-hook 'toc-org-enable)
  )
#+end_src

* Programming related

** Languages to use

** Customize this to the languages you want to use

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (R . t)
   (sql . t)
   (sqlite . t)
   (C . t)
   (ruby . t)
   (python . t)
;   (sml  . t)
   (java . t)
   (emacs-lisp . t)
   ))
#+end_src

#+RESULTS:

** Configure specific tools

#+begin_src emacs-lisp
(setq org-babel-C++-compiler "clang++")
(setq org-babel-python-command "python3")
(setq org-src-preserve-indentation t)
#+end_src

* Make your life easier

** yasnippets

Saves typing and remembering obscure options

#+begin_src emacs-lisp
(use-package "yasnippet"
  :ensure t
  :config
  (yas-global-mode 1)  ; enable it everywhere
  )
#+end_src


** less typing

The following removes the pesky: "Evaluate this ... code block ...?" question

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:


* Other


** Do not add extra indentation to a block

#+begin_src emacs-lisp
(setq org-adapt-indentation nil)
#+end_src

** other ends

I am used to the old <sTAB expansion...

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* function to start presenting

Do any per-buffer configuration here. Sets margins, interspacing, font size.
It can be called by org-mode-hook

#+begin_src emacs-lisp
(defun lecture-start ()
  (interactive)
  (visual-line-mode 1)
  (dmg-font-size 24)
  (setq left-margin-width 10)
  (setq right-margin-width 10)  
  (setq line-spacing 0.2)
  (set-window-buffer nil (current-buffer)) ;; margins only take effect after this
  )
#+end_src

#+RESULTS:
#+begin_example
lecture-start
#+end_example

* Using xournal to annotate blocks

This code is a bit brittle.

- You must have xournal installed and in the path
- It also requires ps2pdf
- PDF files are created in the emacs directory 

#+BEGIN_SRC emacs-lisp
(require 'ps-print)
(when (executable-find "ps2pdf")
  (defun dmg-pdf-print-buffer-with-faces (pdf-name)
    "Print file in the current buffer as pdf, including font, color, and
underline information.  This command works only if you are using a window system,
so it has a way to determine color values.

C-u COMMAND prompts user where to save the Postscript file (which is then
converted to PDF at the same location."
    (let*
        ((ps-name (concat (make-temp-file "x-org-block-") ".ps")))
      
      (ps-print-with-faces (point-min) (point-max) ps-name)
      ;; build command line.. make sure to include spaces and escape parameters
      (shell-command (concat "ps2pdf "  (shell-quote-argument ps-name) " " (shell-quote-argument pdf-name)))
      (delete-file ps-name)
      (message "Wrote %s" pdf-name) pdf-name ) ))
#+END_SRC

#+RESULTS:
#+begin_example
dmg-pdf-print-buffer-with-faces
#+end_example

#+BEGIN_SRC emacs-lisp
(require 'ps-print)
(when (and (executable-find "ps2pdf")
           (executable-find "xournal"))
  (defun dmg-xournal-block-edit ()
    "Print file in the current buffer as pdf then load into xournal"
    (interactive)
    (let* 
        ((pdf-name (concat (make-temp-file "x-org-block-") ".pdf")))
      (save-restriction
      (org-narrow-to-block)
      (dmg-pdf-print-buffer-with-faces pdf-name)
      (message "Starting xournal on file %s" pdf-name)
      (start-process "xournal-prog" "ripp" "xournal" pdf-name)
      ))))
#+END_SRC

#+RESULTS:
#+begin_example
dmg-xournal-block-edit
#+end_example


