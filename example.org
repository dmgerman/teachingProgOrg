#+STARTUP: showall
#+TITLE: Example 
# by default, the result of a block is standard output
#+PROPERTY: header-args         :results output
#+PROPERTY: header-args:C       :main no :flags -std=c99 -Wall --pedantic -Werror
#  use C+++ instead of C++ (L+ means add arguments to language L)
#+PROPERTY: header-args:C+++    :main no :flags -std=c++17 -Wall --pedantic -Werror
# specify the default database
# result:   guarantees the result is typeset as a table
# colnames: orgmode does not insert column names, force it to do it
#+PROPERTY: header-args:sqlite  :db /tmp/rip.db :colnames yes :results  table
# make sure that ^ and _ does not get interpreted, since they are commonly used
# in programming (specially the _)
#+OPTIONS: ^:nil

(the table of contents is automatically generated using :TOC: property, see emacs code)

* Table of contents :TOC:
- [[#demo][Demo]]
- [[#github][Github]]
  - [[#github-can-be-used-as-a-publishing-platform][Github can be used as a publishing platform]]
  - [[#version-control][version control]]
  - [[#some-nitfy-features][some nitfy features]]
  - [[#github-only-shows-the-results-if-exports-both][*github* only shows the *#+RESULTS* if *:exports both*]]
- [[#header-args][header-args]]
  - [[#use-results-output][Use *:results output*]]
- [[#c][C]]
  - [[#warning-and-errors][warning and errors]]
  - [[#using-main-yes][using :main yes]]
- [[#c-1][C++]]
- [[#sql][SQL]]
- [[#python][Python]]
- [[#advanced-org-features][Advanced org-features]]
- [[#some-potential-issues-you-might-encounter][Some potential issues you might encounter]]
- [[#remove][remove]]

* Demo

my main_function

#+begin_src C :exports both
#include <stdio.h>
int main(void) {
  int i;
  for (i = 0;i<3;i++) {
    printf("i : %d %d\n", i, 1<<i);
  }
  return 0;
}
#+end_src

#+RESULTS:
#+begin_example
i : 0 1
i : 1 2
i : 2 4
#+end_example

First some examples of use:

#+begin_src sqlite :exports both
select * from R;
#+end_src

#+RESULTS:
| a | b        |
|---+----------|
| 1 | test     |
| 2 | example  |
| 3 | one more |

#+begin_src python :exports both
l = range (0,3)
list(map(print, map(lambda i: (i,2**i), l)))
#+end_src

#+RESULTS:
#+begin_example
(0, 1)
(1, 2)
(2, 4)
#+end_example

#+begin_src ruby :exports both
l = Array.new(3) {|i| [i,2**i]}
l.map { |p| print(p, "\n")}
#+end_src

#+RESULTS:
#+begin_example
[0, 1]
[1, 2]
[2, 4]
#+end_example

#+begin_src R :exports both
attach(mtcars)
summary(mtcars)
#+end_src

#+RESULTS:
#+begin_example
      mpg          cyl           disp           hp           drat           wt           qsec            vs             am            gear          carb    
 Min.   :10   Min.   :4.0   Min.   : 71   Min.   : 52   Min.   :2.8   Min.   :1.5   Min.   :14.5   Min.   :0.00   Min.   :0.00   Min.   :3.0   Min.   :1.0  
 1st Qu.:15   1st Qu.:4.0   1st Qu.:121   1st Qu.: 96   1st Qu.:3.1   1st Qu.:2.6   1st Qu.:16.9   1st Qu.:0.00   1st Qu.:0.00   1st Qu.:3.0   1st Qu.:2.0  
 Median :19   Median :6.0   Median :196   Median :123   Median :3.7   Median :3.3   Median :17.7   Median :0.00   Median :0.00   Median :4.0   Median :2.0  
 Mean   :20   Mean   :6.2   Mean   :231   Mean   :147   Mean   :3.6   Mean   :3.2   Mean   :17.8   Mean   :0.44   Mean   :0.41   Mean   :3.7   Mean   :2.8  
 3rd Qu.:23   3rd Qu.:8.0   3rd Qu.:326   3rd Qu.:180   3rd Qu.:3.9   3rd Qu.:3.6   3rd Qu.:18.9   3rd Qu.:1.00   3rd Qu.:1.00   3rd Qu.:4.0   3rd Qu.:4.0  
 Max.   :34   Max.   :8.0   Max.   :472   Max.   :335   Max.   :4.9   Max.   :5.4   Max.   :22.9   Max.   :1.00   Max.   :1.00   Max.   :5.0   Max.   :8.0  
#+end_example

It can even output graphics. Make sure to set *org-toggle-inline-images* to not nil

#+begin_src R :file testR.png :results output graphics file
library(lattice)
xyplot(1:10 ~ 1:10)
#+end_src

#+RESULTS:
[[file:testR.png]]

* Github

** Github can be used as a publishing platform
  - *simple publishing*: no need to export
  - it does a *great job rendering org* and code blocks
  - *It is not perfect*
    - by default it does not not show #+RESULTS (more on this later)
    - same basic typesetting for code and results

** version control
  - obvious ;)
  - you can get pull requests

** some nitfy features
 - navigation links
 - cut-and-paste for code blocks
 - edit in place
 - automatic scrollbars for long blocks and results

** *github* only shows the *#+RESULTS* if *:exports both*
  - but it does not respect *header-args*
  - instead, you have to manually add it to each block
  - github will display the file with *different colors and typesetting*
  - but it will *nicely typeset the file* nonetheless

This block does not export its output, and github does not display it

#+begin_src C :results output 
#include <stdio.h>
int main(void) {
  printf("hello world\n");
}
#+end_src

#+RESULTS:
#+begin_example
hello world
#+end_example

This one is properly displayed:

#+begin_src C :results output  :exports both
#include <stdio.h>

int main(void) {
  printf("hello world\n");
}
#+end_src



* header-args

Using *header-args* will reduce the amount of information you have to include in every block header (see top of this file)

** Use *:results output*

#+begin_example
#+PROPERTY: header-args         :results output
#+end_example

  - this guarantees that the result of any block is its *output to stdout*
  - otherwise the result of the block is the last expression

The org default is *:results value*, which keeps the result of the last expression
(language dependent).

#+begin_src emacs-lisp :results value :exports both
(+ 10 1)
#+end_src

#+RESULTS:
#+begin_example
11
#+end_example

Changing it to *:results output* keeps *standard output*:

#+begin_src emacs-lisp :results output :exports both
(print "this is a test")
#+end_src

#+RESULTS:
#+begin_example

"this is a test"
#+end_example

* C

#+begin_example
#+PROPERTY: header-args:C       :main no :flags -std=c99 -Wall --pedantic -Werror
#+end_example

  - do not wrap block in a main function (i.e. block must be complete program)
  - provide the following "flags" to the compiler: *-std=c99 -Wall --pedantic -Werror*
  - *they are language dependent*

Example:

#+begin_src C   :exports both
#include <stdio.h>

int main(void) {
  printf("hello world\n");
}
#+end_src

#+RESULTS:
#+begin_example
hello world
#+end_example

** warning and errors

- *Warnings and errors* are displayed during compilation
- but *line numbers do not match*, due to code that is inserted by org

#+begin_src C :exports both 
int f(void) {
  return ;  // this would create a warning
}
int main(void) {
  f();
}
#+end_src

#+RESULTS:

** using :main yes

- A nice thing is that org can *automatically insert* a *main* function:
  - and you can specify which *#includes* to add

#+begin_src C  :main yes :includes <stdio.h> :exports both
int a = 0;
int b = 3;
printf("The result is %d\n", a + b);
#+end_src

#+RESULTS:
#+begin_example
The result is 3
#+end_example


* C++

Very similar to C.

But... PROPERTY is called *C+++* (due to how org parses it)

#+begin_example
#+PROPERTY: header-args:C+++    :main no :flags -std=c++17 -Wall --pedantic -Werror
#+end_example

You can also have a main automatically inserted, but you might need to indicate which headers to include

#+begin_src C++ :main yes :includes <iostream> :exports both
int a = 100;
int b = 'a';
if (a == b) 
  std::cout << "They are equal\n";
else
  std::cout << "They are not\n";
#+end_src

#+RESULTS:
#+begin_example
They are not
#+end_example

* SQL

- You can use any of the *major backends*.
- Each has different PROPERTY parameters
  - name of the database
  - include columns in the results
  - *important*: use *:results table*
- The examples below are using *sqlite3*.

#+begin_example
#+PROPERTY: header-args:sqlite  :db /tmp/rip.db :colnames yes :results  table
#+end_example
  
Create a table, and populate it. Note that the block does not generate a result.

#+begin_src sqlite  :exports both
drop table if exists R;
create table R(a,b);
insert into R values (1,'test'), (2, 'example'), (3, 'one more');
#+end_src

#+RESULTS:

Simple *select*

#+begin_src sqlite :exports both
select * from R;
#+end_src

#+RESULTS:
| a | b        |
|---+----------|
| 1 | test     |
| 2 | example  |
| 3 | one more |


* Python

You can specify the version of python you want to run using the variable *org-babel-python-command* (see configuration file)

#+begin_src emacs-lisp
(setq org-babel-python-command "python3")
#+end_src

Simple program:

#+begin_src python  :exports both
print("hello world")
#+end_src

#+RESULTS:
#+begin_example
hello world
#+end_example

A more complex program

#+begin_src python   :exports both
def square(x):
    return x*x

print(list(map(square, range(1,10))))
#+end_src

#+RESULTS:
#+begin_example
[1, 4, 9, 16, 25, 36, 49, 64, 81]
#+end_example


* Advanced org-features

Of course you can use advanced org-features, but remember that
students might be confused, since they a are learning programming, not
org-mode

#+name: square
#+begin_src python
def square(x):
    return x*x
#+end_src

#+begin_src python   :exports both :noweb yes
<<square>>
print(list(map(square, range(1,10))))
#+end_src

#+RESULTS:
#+begin_example
[1, 4, 9, 16, 25, 36, 49, 64, 81]
#+end_example

- so make sure you *warn them*

#+begin_src python   :exports both :noweb yes
<<square>> # this is not Python! this is emacs
           # it inserts the blocked name square (see above)
           # here
print(list(map(square, range(1,10))))
#+end_src

#+RESULTS:
#+begin_example
[1, 4, 9, 16, 25, 36, 49, 64, 81]
#+end_example

* Some potential issues you might encounter

- Some programming characters are used by org

- Example: operators in C/C++:

  | operator | meaning | note                                                         |
  |----------+---------+--------------------------------------------------------------|
  | &&       | and     |                                                              |
  |          | or      | no way to include a pipe without making it unreadable in org |

- Some database results might contain | and mess the rendering of the result


* TODO remove

#+begin_src emacs-lisp
(setq left-margin-width 10)
(setq right-margin-width 10)  
(setq line-spacing 0.2) 
#+end_src

#+RESULTS:
